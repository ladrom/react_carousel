{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["Carousel","state","position","handleNextButton","maxPosition","stepSize","isLastCheck","infinite","setState","handlePrevButton","this","props","images","step","frameSize","itemWidth","animationDuration","length","className","style","width","map","image","startIndex","lastIndexOf","endIndex","id","slice","transform","transition","src","alt","type","disabled","onClick","React","Component","Form","updateInputValues","updateCheckboxValue","setting","labelText","key","defaultValue","htmlFor","name","min","onChange","event","Number","currentTarget","value","String","checked","App","Error","isChecked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29f5451e.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\ntype State = {\n  position: number,\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    position: 0,\n  };\n\n  handleNextButton = (\n    position: number,\n    maxPosition: number,\n    stepSize: number,\n    isLastCheck: boolean,\n    infinite: boolean,\n  ) => {\n    if (isLastCheck) {\n      this.setState({\n        position: maxPosition,\n      });\n    } else {\n      this.setState(state => ({\n        position: state.position - stepSize,\n      }));\n    }\n\n    if (infinite && position === maxPosition) {\n      this.setState({\n        position: 0,\n      });\n    }\n  };\n\n  handlePrevButton = (\n    position: number,\n    maxPosition: number,\n    stepSize: number,\n    infinite: boolean,\n  ) => {\n    if (this.state.position + (stepSize) >= 0) {\n      this.setState({\n        position: 0,\n      });\n    } else {\n      this.setState(state => ({\n        position: state.position + (stepSize),\n      }));\n    }\n\n    if (infinite && position + stepSize === stepSize) {\n      this.setState({\n        position: maxPosition,\n      });\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    let { position } = this.state;\n    const maxPosition = -itemWidth * (images.length - frameSize);\n    const stepSize = step * itemWidth;\n    const isLastCheck = position - (step * itemWidth) <= maxPosition;\n\n    if (+position % itemWidth !== 0) {\n      const difference = +position % itemWidth;\n\n      position -= difference;\n\n      if (position < maxPosition) {\n        position = maxPosition;\n      }\n    }\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{\n          width: `${frameSize * itemWidth}px`,\n        }}\n      >\n        <ul className=\"Carousel__list\">\n          {images.map(image => {\n            const startIndex = image.lastIndexOf('/') + 1;\n            const endIndex = image.lastIndexOf('.');\n            const id = image.slice(startIndex, endIndex);\n\n            return (\n              <li\n                key={id}\n                style={{\n                  transform: `translateX(${position}px)`,\n                  transition: `transform ${animationDuration}ms`,\n                }}\n              >\n                <img\n                  src={image}\n                  alt={id}\n                  width={itemWidth}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            disabled={!infinite && position === 0}\n            onClick={() => {\n              this.handlePrevButton(position, maxPosition, stepSize, infinite);\n            }}\n          >\n            Prev\n          </button>\n          <button\n            data-cy=\"next\"\n            type=\"button\"\n            disabled={!infinite && position === maxPosition}\n            onClick={() => {\n              this.handleNextButton(\n                position, maxPosition, stepSize, isLastCheck, infinite,\n              );\n            }}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Form.scss';\n\ntype Props = {\n  updateInputValues: (value: number, name: string) => void,\n  updateCheckboxValue: (isChecked: boolean) => void,\n};\n\nexport const Form: React.FC<Props> = (props) => {\n  const { updateInputValues, updateCheckboxValue } = props;\n  const formSettings = [\n    ['step', 'Step', '1', '3'],\n    ['frameSize', 'Frame Size', '2', '3'],\n    ['itemWidth', 'Item Width', '3', '130'],\n    ['animationDuration', 'Animation Duration', '4', '1000'],\n  ];\n\n  return (\n    <form className=\"Form\">\n      {\n        formSettings.map((setting) => {\n          const id = setting[0];\n          const labelText = setting[1];\n          const key = setting[2];\n          const defaultValue = setting[3];\n\n          return (\n            <div\n              className=\"Form__content\"\n              key={key}\n            >\n              <label\n                htmlFor={id}\n                className=\"Form__label\"\n              >\n                {labelText}\n              </label>\n              <input\n                className=\"Form__input\"\n                type=\"number\"\n                name={id}\n                id={id}\n                min={1}\n                defaultValue={defaultValue}\n                onChange={(event) => {\n                  if (Number(event.currentTarget.value) <= 0) {\n                    // eslint-disable-next-line no-param-reassign\n                    event.currentTarget.value = String(1);\n                  }\n\n                  updateInputValues(\n                    Number(event.currentTarget.value),\n                    event.currentTarget.name,\n                  );\n                }}\n              />\n            </div>\n          );\n        })\n      }\n\n      <div className=\"Form__content\">\n        <label\n          htmlFor=\"infinite\"\n          className=\"Form__label\"\n        >\n          Infinite:\n        </label>\n        <input\n          className=\"Form__checkbox\"\n          id=\"infinite\"\n          name=\"infinite\"\n          type=\"checkbox\"\n          onChange={(event) => {\n            updateCheckboxValue(event.currentTarget.checked);\n          }}\n        />\n      </div>\n\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel/Carousel';\nimport { Form } from './components/Form/Form';\n\nexport interface State {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  updateInputValues = (value: number, name: string) => {\n    switch (name) {\n      case 'step':\n        this.setState({\n          step: value,\n        });\n        break;\n\n      case 'frameSize':\n        this.setState({\n          frameSize: value,\n        });\n        break;\n\n      case 'itemWidth':\n        this.setState({\n          itemWidth: value,\n        });\n        break;\n\n      case 'animationDuration':\n        this.setState({\n          animationDuration: value,\n        });\n        break;\n\n      default:\n        throw new Error('Something went wrong');\n    }\n  };\n\n  updateCheckboxValue = (isChecked: boolean) => {\n    this.setState({\n      infinite: isChecked,\n    });\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Form\n          updateInputValues={this.updateInputValues}\n          updateCheckboxValue={this.updateCheckboxValue}\n        />\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}